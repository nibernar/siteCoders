# Configuration Docker Compose pour l'extension du site CODERSü§ñ
# Cette configuration orchestre les services frontend, backend et base de donn√©es
# pour l'environnement de d√©veloppement.

services:
  # Service Frontend (React)
  frontend:
    image: node:18-alpine
    container_name: coders-frontend
    working_dir: /app
    networks:
      - frontend-network  # Connexion uniquement au r√©seau frontend
    volumes:
      # Montage du code source pour le d√©veloppement en temps r√©el
      - ./src:/app/src
      # Montage des fichiers de configuration du projet
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.app.json:/app/tsconfig.app.json
      - ./tsconfig.node.json:/app/tsconfig.node.json
      - ./tailwind.config.js:/app/tailwind.config.js
      - ./postcss.config.js:/app/postcss.config.js
      - ./vite.config.ts:/app/vite.config.ts
      - ./index.html:/app/index.html
      # Volume d√©di√© pour node_modules pour am√©liorer les performances
      - frontend_node_modules:/app/node_modules
    ports:
      - "${FRONTEND_PORT:-3000}:3000" # Exposition du port pour acc√®s au frontend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      # URL du backend en utilisant le nom du service au lieu de localhost
      # Cela fonctionne car les services sont dans le m√™me r√©seau Docker
      - VITE_API_URL=http://backend:5000
      # Configuration pour optimiser le hot-reload sur macOS
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING:-true}
    command: sh -c "npm install && echo 'Attente de 15 secondes pour permettre √† la base de donn√©es de d√©marrer...' && sleep 15 && npm run dev"
    depends_on:
      - backend # Le frontend d√©pend du backend
    # Politique de red√©marrage: le conteneur red√©marre toujours sauf s'il est explicitement arr√™t√©
    # Id√©al pour le d√©veloppement car permet aux d√©veloppeurs d'arr√™ter manuellement sans red√©marrage auto
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Backend (Node.js API)
  backend:
    image: node:18-alpine
    container_name: coders-backend
    working_dir: /app
    networks:
      - frontend-network  # Connexion au r√©seau frontend pour communiquer avec le frontend
      - backend-network   # Connexion au r√©seau backend pour communiquer avec la base de donn√©es
    volumes:
      # Montage du code source pour le d√©veloppement en temps r√©el
      - ./backend:/app
      # Volume d√©di√© pour node_modules pour am√©liorer les performances
      - backend_node_modules:/app/node_modules
      # Volumes persistants pour les logs et uploads
      - ./data/logs:/app/logs
      - ./data/uploads:/app/uploads
    ports:
      - "${API_PORT:-5001}:5000" # Exposition du port pour acc√®s √† l'API
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=5000
      # Variables de connexion √† la base de donn√©es utilisant le nom du service
      # Cela fonctionne car les services sont dans le m√™me r√©seau Docker
      - DB_HOST=database
      - DB_PORT=3306
      - DB_USER=${DB_USER:-coders_user}
      - DB_PASSWORD=${DB_PASSWORD:-coders_password}
      - DB_NAME=${DB_DATABASE:-coders_db}
      # Variable pour la s√©curit√© JWT
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_key}
      # Activation du mode debug
      - DEBUG=${DEBUG:-app:*}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    command: sh -c "npm install && npm run dev"
    depends_on:
      - database # Le backend d√©pend de la base de donn√©es
    # Politique de red√©marrage: le conteneur red√©marre toujours sauf s'il est explicitement arr√™t√©
    # Assure la disponibilit√© du service API tout en permettant un arr√™t manuel pendant le d√©veloppement
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Base de donn√©es (MySQL)
  database:
    image: mysql:8.0
    container_name: coders-database
    networks:
      - backend-network  # Connexion uniquement au r√©seau backend pour l'isolation
    volumes:
      # Volume persistant pour les donn√©es de la base
      - db_data:/var/lib/mysql
      # Montage des scripts d'initialisation
      - ./database/init:/docker-entrypoint-initdb.d
    # Pas d'exposition de port pour la base de donn√©es - uniquement accessible par le backend
    # Les ports sont expos√©s uniquement dans docker-compose.override.yml pour le d√©veloppement
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-example_root_password}
      - MYSQL_DATABASE=${DB_DATABASE:-coders_db}
      - MYSQL_USER=${DB_USER:-coders_user}
      - MYSQL_PASSWORD=${DB_PASSWORD:-coders_password}
    # Politique de red√©marrage: le conteneur red√©marre toujours sauf s'il est explicitement arr√™t√©
    # Crucial pour maintenir la persistence des donn√©es tout en permettant un arr√™t contr√¥l√©
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

# D√©finition des volumes persistants
volumes:
  # Volume pour les node_modules du frontend
  frontend_node_modules:
    name: coders-frontend-node-modules
  # Volume pour les node_modules du backend
  backend_node_modules:
    name: coders-backend-node-modules
  # Volume pour les donn√©es de la base de donn√©es
  db_data:
    name: coders-db-data

# Configuration du r√©seau Docker interne
networks:
  # R√©seau pour la communication entre le frontend et le backend
  frontend-network:
    name: coders-frontend-network
    driver: bridge
  # R√©seau pour la communication entre le backend et la base de donn√©es
  backend-network:
    name: coders-backend-network
    driver: bridge